import { io } from "socket.io-client";
import React, { useEffect, useState, useContext } from "react";
import SocketContext from "../contexts/Socket";
import { useLocation, useParams, useNavigate } from "react-router-dom";
import {
  useDisclosure,
  Flex,
  Box,
  useToast,
  Spinner,
  Button,
} from "@chakra-ui/react";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import logo from "../assets/MMlogo.gif";
import MMchallenger from "../assets/newchallenjour.jpg";
import notmariodontsuemenintendo from "../assets/nostalgiamario.png";


//import {MMClass} from "../components/matchmaking/matchmakingsocket";
import { FetchError, header, headerPost } from "../components/FetchError";
//location.host = "localhost:4000"

//client 192.168.1.31:4000
//vm en nat

// Apr√®s discussion sur le pont avec la partie Play, j'enl√®ve la partie alertes toast
//Au final, ce sera un bouton avec opt-in opt-out of queue dans la page play √† c√¥t√© de createroom
//Quand √ßa match, je cr√©e un room au nom d'un userid pour le joueur 1, je joinroom le joueur 2 en utilisant les fonctions dans play.tsx
//Il y a un int√©r√™t que √ßa passe par un room du play tsx pour qu'il soit possible de le voir dans le roomlist
// -> pouvoir spectateur un room √† partir de l√†
//Pas de pop-up pour accepter ou decliner le match vu que ce ne n'est pas d√©mand√© dans le sujet, aucune id√©e sur la correction
//Peut √™tre implement√© apr√®s si le reste est bien fait
// En conclusion, la partie socket/bouton matchmaking dans cette page sera boug√© dans la page Play √† c√¥t√© du Create Room sans le toast
// Il faudra que je disable le bouton createRoom(peut simplement if (Queue) alors rien faire ) ou emp√™cher un joueur de rejoindre un room avec le Queue state √† true
// Tout √ßa √† rajouter dans un play finalis√©, en attendant, g√©r√©r le opt out du matchmaking et que le frontend recoit l'en dessous
//C√¥t√© backend, la fonction rungame emit vers le frontend socket id l'id du joueur avec lequel il est match√© et si il est celui qui cr√©e le room ou celui qui attend de rejoindre le room de l'autre

// Id√©e de douche, rajouter un component sur la page d'acceuil qui check si le serveur backend est joignable ou non avec le spinner tout con de nintendo l√†
// Ca nous √©vite les "ah bah pk il marche plus le login maintenant lol"
// Ca peut check tout b√™te avec un usrsocket vers le backend qui renvoie un "oui tkt je suis l√†" et tant qu'on n'a pas re√ßu de emit, on affiche un spinner
// Apr√®s faire un gateway juste sur √ßa est peut-√™tre un peu trop, je peux le rajouter dans mon mmgateway mais c'est meugnon
//Il n'y a pas √† check plusieurs fois, juste √† check jusqu'√† qu'il re√ßoit une r√©ponse du backend et apr√®s on off

const startmatchmaking = async (
  e: React.MouseEvent<HTMLButtonElement>,
  usrSocket: any,
  obj: {
    idUser: string;
  },
  navigate: any
) => {
  e.preventDefault();
  console.log(obj);
  usrSocket?.emit("startmatchmaking", obj, (res: any) => {
    console.log("startmatchmaking : " + res);
  });
};

export default function MatchmakingPage() {
  const navigate = useNavigate();
  const [count, setCount] = useState(0);
  const { usrSocket } = useContext(SocketContext);

  const findMatch = () => {
    console.log("start queue in");
    console.log(usrSocket?.id);
    usrSocket?.emit("queuein", (res) => {
      console.log("res: ");
      console.log(res);
    });
  };


  //I force queue out the user in the situations I throw the toast so they can requeue without issue
  const toastFailedQueue = () => {

    toast("ü¶Ñ Matchmaking failed due to already being in queue! \n You've been queued out, please try the matchmaking again", {
      position: "top-right",
      toastId: "toastFailedQueue",
      autoClose: 5000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      progress: undefined,
      theme: "dark",
      });
  };

  const declineMatch = () => {
    usrSocket?.emit("declineMMmatch");
  };

  const acceptMatch = () => {
    usrSocket?.emit("acceptMMmatch");
  };

  const stopFindingMatch = () => {
    console.log("stop finding match");
    usrSocket?.emit("queueout");
  };

  type MMState = "ACCEPTED" | "DECLINED";

  const cancelRef = React.useRef(null);

  const [errorCode, setErrorCode] = useState<number>(200);
  const [Queue, enterQueue] = useState(false);

  useEffect(() => {
    console.log("load exception listener");
    usrSocket?.on("matchmakingfailed", (res: any) => {
      console.log(res);
      stopFindingMatch();
      enterQueue(false);
      toastFailedQueue();
    });

    usrSocket?.on("matchmakeGame", (res: any) => {
      //openAlert();
      console.log(res);
      navigate({ pathname: "/play-invite/" + res.idGame });
    });
    return () => {
      console.log("unload exception listener");
      stopFindingMatch();
      enterQueue(false); //resets button&spinner
      usrSocket?.off("matchmakingfailed");
      // usrSocket?.off('acceptMMmatchFailed');
      // usrSocket?.off('declineMMmatchFailed');
      usrSocket?.off("matchmakeGame");
    };
  }, [usrSocket]);

  const startMatching = (e) => {
    if (e.detail > 1)
      //prevent double click to mess with events, only allows single proper clicks
      return;
    e.preventDefault();

    if (Queue) {
      stopFindingMatch();
      enterQueue(false); //resets button&spinner
      return;
    }
    enterQueue(true);

    try {
      findMatch();
    } catch (e) {
      enterQueue(false);
      toastFailedQueue();
      console.log("end startmaztching");
    }
  };

  return (
    <>
      {errorCode && errorCode >= 400 && <FetchError code={errorCode} />}
      <div className="matchmakingPage">
        <Button onClick={startMatching}>
          <Flex alignItems={"center"}>
            <Box>
              {Queue
                ? "Finding a worthy challenger... Click again to cancel"
                : "Play Pong!"}
            </Box>
          </Flex>
        </Button>
        <br></br>
        {Queue && (
                <div>
                 <img style={{ backgroundColor: 'transparent', alignSelf: 'center', width: 50, height: 50 }} src={notmariodontsuemenintendo} alt="loading..." />
                 <img style={{ alignSelf: 'center', width: 50, height: 50 }} src={logo} alt="loading..." />
                 <img style={{ alignSelf: 'center', width: 150, height: 50 }} src={MMchallenger} alt="loading..." />
                </div>
           )}
        <ToastContainer
          position="top-right"
          autoClose={5000}
          hideProgressBar={false}
          newestOnTop={false}
          closeOnClick
          rtl={false}
          pauseOnFocusLoss
          draggable
          pauseOnHover
          theme="light"
        />
        {/* Same as */}
        <ToastContainer />
      </div>
    </>
  );
}
